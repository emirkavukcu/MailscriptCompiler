%{
#include "classes.h"
#include "classes.tab.h"

int countNewlines(const char *str) {
    int count = 0;
    while (*str != '\0') {
        if (*str == '\n') {
            count++;
        }
        str++;
    }
    return count;
}

int nested = 0;
int linecount = 1;
%}

tNEWLINE \n

tLOCALPART [A-Za-z0-9\-_]+(([A-Za-z0-9\-_]*|\.?)[A-Za-z0-9\-_])*
tDOMAIN [A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+|[A-Za-z0-9]{1}

/* Comments */
tSLC  "//" 
tOMLC "/\*" 
tCMLC "*/"   


%x singleLineComment multiLineComment
%%
{tSLC}  BEGIN(singleLineComment);
<singleLineComment>{tNEWLINE}    {linecount++; BEGIN(INITIAL);}
<singleLineComment>.    ;


{tOMLC} {BEGIN(multiLineComment); ++nested;}
<multiLineComment>{tCMLC}      { if (--nested == 0) BEGIN(INITIAL); }
<multiLineComment>{tOMLC}     ++nested;
<multiLineComment>{tNEWLINE}    {linecount++;} ;
<multiLineComment>.         ;

"Mail" return tMAIL;
"end"[ \t\n\r\f]+"Mail" {linecount += countNewlines(yytext); return tENDMAIL;}
    
"schedule" return tSCHEDULE;
"end"[ \t\n\r\f]+"schedule" {linecount += countNewlines(yytext); return tENDSCHEDULE;}

"send" {
    yylval.sendTokenNode.linenum = linecount;
    return tSEND;
} 

"set" return tSET;
"to" return tTO;
"from" return tFROM;
@ return tAT;
, return tCOMMA;
: return tCOLON;
\( return tLPR;
\) return tRPR;
\[ return tLBR;
\] return tRBR;

[a-zA-Z\_]+[a-zA-Z0-9\_]* {   
    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.identNode.identName = result;
    yylval.identNode.linenum = linecount;
    return tIDENT;
    }   

["][^\"]*["] {
    linecount += countNewlines(yytext);
    yytext[yyleng - 1] = '\0';
    yytext = yytext + 1;
    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.stringNode.value = result;
    return tSTRING;
    }

[0-9]{2}"/"[0-9]{2}"/"[0-9]{4}|[0-9]{2}\.[0-9]{2}\.[0-9]{4}|[0-9]{2}-[0-9]{2}-[0-9]{4} {
    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.dateNode.date = result;
    yylval.dateNode.linenum = linecount;
    return tDATE;
    }

[0-9]{2}:[0-9]{2} {
    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.timeNode.time = result;
    return tTIME;
    }

{tLOCALPART}"@"({tDOMAIN}"."{tDOMAIN}"."{tDOMAIN}|{tDOMAIN}"."{tDOMAIN}) {
    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.adressNode.value = result;
    return tADDRESS;
    }

[ \t]+
{tNEWLINE}    {linecount++;}
.	    return yytext[0];
%%
